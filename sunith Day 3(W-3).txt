#include <iostream>
#include <queue>
#include <cstdlib> 
#include <ctime>   
#include <thread>  
#include <chrono>  

using namespace std;
enum EventType
{
    Tap,Swipe
};

class Event
{
public:
    EventType eventType; 
    int x, y;            
    long long timestamp; 

    Event(EventType type, int x, int y)
        : eventType(type), x(x), y(y)
    {
        timestamp = chrono::system_clock::now().time_since_epoch().count();
    }
};

class EventQueue
{
private:
    queue<Event> eventQueue; 

public:
    void pushEvent(const Event& event)
    {
        eventQueue.push(event);
    }

    
    bool hasEvents() {
        return !eventQueue.empty();
    }

    Event popEvent()
    {
        if (hasEvents())
        {
            Event e = eventQueue.front();
            eventQueue.pop();
            return e;
        }
        throw runtime_error("No events to pop.");
    }
};

class EventHandler
{
public:
    void processEvent(const Event& event)
    {
        if (event.eventType == Tap)
        {
            cout << "Tap detected at position (" << event.x << ", " << event.y << ").\n";
        } else if (event.eventType == Swipe)
        {
            handleSwipe(event);
        }
    }

private:
    void handleSwipe(const Event& event)
    {
        string direction;
        if (event.x > 500)
        {
            direction = "Right";
        } else if (event.x < 100)
        {
            direction = "Left";
        } else if (event.y > 500)
        {
            direction = "Down";
        } else if (event.y < 100)
        {
            direction = "Up";
        }
        cout << "Swipe detected in the " << direction << " direction.\n";
    }
};
void generateRandomEvents(EventQueue& eventQueue)
{
    srand(static_cast<unsigned>(time(0))); 

    for (int i = 0; i < 10; ++i)
    {
        int x = rand() % 801; 
        int y = rand() % 601; 
        EventType type = (rand() % 2 == 0) ? Tap : Swipe; 
        Event event(type, x, y);
        eventQueue.pushEvent(event);
        this_thread::sleep_for(chrono::milliseconds(500)); 
    }
}

int main()
{
    EventQueue eventQueue;
    EventHandler eventHandler;
    generateRandomEvents(eventQueue);

    while (eventQueue.hasEvents()) {
        Event event = eventQueue.popEvent();
        eventHandler.processEvent(event);
        this_thread::sleep_for(chrono::milliseconds(300)); 
    }
    return 0;
}
